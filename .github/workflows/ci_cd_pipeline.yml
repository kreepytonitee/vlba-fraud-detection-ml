  name: ML CI/CD Pipeline

  on:
    push:
      branches:
        - main
        - develop
    pull_request:
      branches:
        - main
        - develop

  jobs:
    build-and-test:
      runs-on: ubuntu-latest
      steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

    #   - name: Run unit tests
    #     run: pytest tests/

    train-and-evaluate-model:
      needs: build-and-test
      runs-on: ubuntu-latest
      steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

    #   - name: Create MLflow tracking directory
    #     run: mkdir -p mlflow_tracking

    #   - name: Train and Evaluate Model
    #     env:
    #       MLFLOW_TRACKING_URI: ./mlruns # Use local file-based tracking for GitHub Actions
    #     run: |
    #       python src/models/train_model.py
    #       # Find the latest run ID for evaluation
    #       LATEST_RUN_ID=$(ls -td mlflow_tracking/mlruns/0/* | head -1 | xargs basename)
    #       echo "MLFLOW_RUN_ID=$LATEST_RUN_ID" >> $GITHUB_ENV

    #       # Download feature_columns.json artifact
    #       mlflow artifacts download --run-id $LATEST_RUN_ID --artifact-path feature_columns.json --dst .

    #       python src/models/evaluate_model.py # This will use the MLFLOW_RUN_ID from env

    # Deploy to a staging environment (example using Docker image build)
    # For actual deployment, you'd push to a registry and deploy to a cloud service.
    deploy-model:
    #   needs: train-and-evaluate-model
      if: github.ref == 'refs/heads/main' # Only deploy from main branch
      runs-on: ubuntu-latest
      steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub (if using)
        # Use secrets for credentials
        # uses: docker/login-action@v2
        # with:
        #   username: ${{ secrets.DOCKER_USERNAME }}
        #   password: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "Skipping Docker login for basic example"

      - name: Build Docker image
        run: docker build -t fraud-detector-api:latest .

      - name: Push Docker image (optional)
        # run: docker push your-docker-repo/fraud-detector-api:latest
        run: echo "Skipping Docker push for basic example"

      - name: Simulate deployment (e.g., echo deployment commands)
        run: |
          echo "Simulating deployment of fraud-detector-api:latest"
          echo "You would typically use Kubernetes, Docker Compose, or cloud services here."