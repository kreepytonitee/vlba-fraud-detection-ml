# cloudbuild-deploy.yml
# This pipeline ONLY deploys the web service to Cloud Run
# Triggered: On code changes to main branch, manual deployment

substitutions:
  _CLOUD_RUN_REGION: 'europe-west10'
  _GCS_DATA_BUCKET: 'vlba-fd-data-bucket'
  _GCS_MODEL_BUCKET: 'vlba-fd-model-bucket'
  _GCS_LOOKUPS_BUCKET: 'vlba-fd-lookups-bucket'
  _GIT_TAG: 'latest'
  _SERVICE_NAME: 'fraud-detection-service'
  
steps:
# Step 1: Build the Application Docker image using your existing dockerfile
- name: 'gcr.io/cloud-builders/docker'
  id: 'Build Application Image'
  args:
  - 'build'
  - '-f'
  - 'dockerfile'  # Use your existing dockerfile
  - '-t'
  - 'gcr.io/${PROJECT_ID}/${_SERVICE_NAME}:${_GIT_TAG}'
  - '-t'
  - 'gcr.io/${PROJECT_ID}/${_SERVICE_NAME}:${BUILD_ID}'
  - '.'

# Step 2: Push the Docker image to Container Registry
- name: 'gcr.io/cloud-builders/docker'
  id: 'Push Application Image'
  args:
  - 'push'
  - 'gcr.io/${PROJECT_ID}/${_SERVICE_NAME}:${_GIT_TAG}'

- name: 'gcr.io/cloud-builders/docker'
  id: 'Push Application Image with Build ID'
  args:
  - 'push'
  - 'gcr.io/${PROJECT_ID}/${_SERVICE_NAME}:${BUILD_ID}'

# Step 3: Deploy to Cloud Run using your main.py FastAPI app
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'Deploy to Cloud Run'
  entrypoint: 'gcloud'
  args:
  - 'run'
  - 'deploy'
  - '${_SERVICE_NAME}'
  - '--image'
  - 'gcr.io/${PROJECT_ID}/${_SERVICE_NAME}:${BUILD_ID}'
  - '--region'
  - '${_CLOUD_RUN_REGION}'
  - '--platform'
  - 'managed'
  - '--allow-unauthenticated'
  - '--set-env-vars'
  - 'GCS_DATA_BUCKET=${_GCS_DATA_BUCKET},GCS_MODEL_BUCKET=${_GCS_MODEL_BUCKET},GCS_LOOKUPS_BUCKET=${_GCS_LOOKUPS_BUCKET},SERVING_MODE=true'
  - '--port'
  - '8080'
  - '--memory'
  - '4Gi'
  - '--cpu'
  - '2'
  - '--timeout'
  - '300'  # 5 minutes timeout for API calls
  # - '--service-account'
  # - 'cloud-run-service@${PROJECT_ID}.iam.gserviceaccount.com'
  - '--max-instances'
  - '10'
  - '--min-instances'
  - '1'  # Keep at least 1 instance warm

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_STANDARD_4'  # Standard machine for deployment