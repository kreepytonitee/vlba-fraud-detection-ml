substitutions:
  _CLOUD_RUN_REGION: 'europe-west10' # Default region, override in trigger if needed
  _GCS_DATA_BUCKET: 'vlba-fd-data-bucket' # Replace with your actual data bucket
  _GCS_MODEL_BUCKET: 'vlba-fd-model-bucket' # Replace with your actual model bucket
  _GIT_TAG: 'latest' # Default tag if not provided by trigger (e.g., for manual builds)
  _GCS_LOOKUPS_BUCKET: 'vlba-fd-lookups-bucket'
  
steps:
# Step 1: Build the ML Pipeline Docker image
# This creates a container with all dependencies installed for running the ML pipeline
- name: 'gcr.io/cloud-builders/docker'
  id: 'Build ML Pipeline Image'
  args:
  - 'build'
  - '-t'
  - 'ml-pipeline:${_GIT_TAG}'
  - '-t'
  - 'ml-pipeline:latest'
  - '.'

# Step 2: Run ML Pipeline in the built container
# Execute the cloud_orchestrator.py script with all dependencies available
- name: 'ml-pipeline:latest'
  id: 'Run ML Pipeline'
  entrypoint: 'python'
  args: ['src/cloud_orchestrator.py']  # Path matches your project structure
  env: # Pass GCS bucket names as environment variables to the script
    - 'GCS_DATA_BUCKET=${_GCS_DATA_BUCKET}'
    - 'GCS_MODEL_BUCKET=${_GCS_MODEL_BUCKET}'
    - 'GCS_LOOKUPS_BUCKET=${_GCS_LOOKUPS_BUCKET}'

# Step 3: Build the Application Docker image for Cloud Run deployment
# This uses the same Dockerfile but tags it for deployment
- name: 'gcr.io/cloud-builders/docker'
  id: 'Build Application Docker Image'
  args:
  - 'build'
  - '-t'
  - 'gcr.io/vlba-fraud-detection/fraud-detection-app:${_GIT_TAG}' # Use _GIT_TAG for versioning
  - '-t'
  - 'gcr.io/vlba-fraud-detection/fraud-detection-app:latest' # Also tag as latest
  - '.'

# Step 4: Push the Docker image to Google Container Registry
# Persists the built image for Cloud Run deployment
- name: 'gcr.io/cloud-builders/docker'
  id: 'Push Application Docker Image'
  args:
  - 'push'
  - 'gcr.io/vlba-fraud-detection/fraud-detection-app:${_GIT_TAG}'

- name: 'gcr.io/cloud-builders/docker'
  id: 'Push Application Docker Image Latest'
  args:
  - 'push'
  - 'gcr.io/vlba-fraud-detection/fraud-detection-app:latest'

# Step 5: Deploy to Cloud Run
# Deploy the application to Cloud Run with proper environment variables
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'Deploy Application to Cloud Run'
  entrypoint: 'gcloud'
  args:
  - 'run'
  - 'deploy'
  - 'fraud-detection-service' # Name of your Cloud Run service
  - '--image'
  - 'gcr.io/vlba-fraud-detection/fraud-detection-app:${_GIT_TAG}'
  - '--region'
  - '${_CLOUD_RUN_REGION}' # Region for Cloud Run deployment
  - '--platform'
  - 'managed'
  - '--allow-unauthenticated' # Allow unauthenticated access
  - '--set-env-vars'
  - 'GCS_DATA_BUCKET=${_GCS_DATA_BUCKET},GCS_MODEL_BUCKET=${_GCS_MODEL_BUCKET},GCS_LOOKUPS_BUCKET=${_GCS_LOOKUPS_BUCKET}'
  - '--port'
  - '8080' # Match the port in your Dockerfile
  - '--memory'
  - '2Gi' # Adjust based on your ML model requirements
  - '--cpu'
  - '2' # Adjust based on your performance needs
  - '--timeout'
  - '3600' # 1 hour timeout for ML operations

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8' # Use higher CPU for ML pipeline processing